package pkg;

/**
 * Created by Admin on 25.06.2015.
 */
// Import File object to work with xml file
import java.io.File;

// Import Document object interface to store parsed file
import org.w3c.dom.*;
import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

// Import xml parser
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;


// Import list data-structure
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.*;

// Import Map data-structure


public class OrderBookSAXv2 extends DefaultHandler {
    /*
        // Configure xml file name or path
        private static String xmlFileName = "C:\\Users\\Admin\\Documents\\orders.xml";

        static Document doc = null;
    */
    // Create new Map structure to store lists
    ///private static Map<String, List> listMap = new HashMap();


    static String xmlFileName = "C:\\Users\\Admin\\Documents\\orders.xml";
    Map<String, List> listMap;
    List<Transaction> transactL;
    String transactionXMLFileName;
    String tmpValue;
    Transaction transactionTmp;
    String bookNameTmp;
    Integer orderIdTmp;

    public OrderBookSAXv2(String xmlFileName) {
        this.transactionXMLFileName = xmlFileName;
        listMap = new HashMap();
        bookNameTmp = "";
        ///transactL = new ArrayList<Transaction>();
        parseDocument();
        printDatasNew();

    }

    private void parseDocument() {
        //parse
        SAXParserFactory factory = SAXParserFactory.newInstance();
        try {
            SAXParser parser = factory.newSAXParser();
            parser.parse(transactionXMLFileName, this);
        } catch (ParserConfigurationException e) {
            System.out.println("ParcerConfig error");
        } catch (SAXException e) {
            System.out.println("SAXException : xml not well formed");
        } catch (IOException e) {
            System.out.println("IO error");
        }
    }

    private void printDatas() {
        //System.out.println(bookL.size());
        /*for(int i = 0; i < listMap.size();i++) {
            transactL = listMap.get(i);
            for (Transaction tmpTrn : transactL) {
                System.out.println(tmpTrn.getVolume() + "   " + tmpTrn.getOrderID() + "   " + tmpTrn.getPrice() +
                "   " + tmpTrn.operationType);
            }
        }*/
        //printListMap(listMap);
        LinkedList linkListTmp;
        Transaction tr;
        for (Map.Entry entry : listMap.entrySet()) {
            System.out.println("             Map.Entry entry " + entry.getKey() + " - " + entry.getValue());
            linkListTmp = (LinkedList) entry.getValue();

            for (int j = 0; j < linkListTmp.size(); j++) {
                //linkListTmp.s
                tr = (Transaction) linkListTmp.get(j);
                System.out.println("   Map.Entry Book Name: " + entry.getKey() + ", Order id: " + tr.getOrderID() +
                        ", Volume: " + tr.getVolume() + ", Price: " + tr.getPrice() + ", Operation Type: " +
                        tr.operationType);
            }
        }
    }
    private void printDatasNew() {
        LinkedList linkListTmp;
        Transaction tr;
//        ArrayList<Integer> arrListBuy = null;
//        ArrayList<Integer> arrListSell = null;
        HashMap<Double, ArrayList<Integer>> mapBuy = new HashMap<>();
        ArrayList<Integer> arrListBuy;
        HashMap<Double, ArrayList<Integer>> mapSell = new HashMap<>();
        ArrayList<Integer> arrListSell;
        for (Map.Entry entry : listMap.entrySet()) {
            System.out.println("            Map.Entry entry " + entry.getKey() + " - " + entry.getValue());
            linkListTmp = (LinkedList) entry.getValue();
            for (int j = 0; j < linkListTmp.size(); j++) {
                tr = (Transaction) linkListTmp.get(j);
                if (tr.operationType.equals("SELL")) {
                    if(mapSell.get(tr.getPrice()) != null) {
                        arrListSell = mapSell.get(tr.getPrice());
                    } else {
                        arrListSell = new ArrayList<Integer>();
                    }
                    arrListSell.add(tr.getVolume());
                    mapSell.put(tr.getPrice(), arrListSell);
                }
                if  (tr.operationType.equals("BUY")) {
                    if(mapBuy.get(tr.getPrice()) != null) {
                        arrListBuy = mapBuy.get(tr.getPrice());
                    } else {
                        arrListBuy = new ArrayList<Integer>();
                    }
                    arrListBuy.add(tr.getVolume());
                    mapBuy.put(tr.getPrice(), arrListBuy);
                }



                System.out.println("   Map.Entry Book Name: " + entry.getKey() + ", Order id: " + tr.getOrderID() +
                        ", Volume: " + tr.getVolume() + ", Price: " + tr.getPrice() + ", Operation Type: " +
                        tr.operationType);
            }
            //if (mapBuy.size() > mapSell.size())
            Integer sumValue;

            for (Map.Entry entry1 : mapBuy.entrySet()){
                arrListBuy = (ArrayList) entry1.getValue();
                sumValue = 0;
                for (int k = 0; k < arrListBuy.size(); k++){
                    sumValue += arrListBuy.get(k);
                }
                log("    Bit: " + entry1.getKey() + " value " + sumValue);
            }
        }
    }
    private void createLists() {
        //printListMap(listMap);
        LinkedList linkListTmp;
        Transaction tr;
        for (Map.Entry entry : listMap.entrySet()) {
            System.out.println("             Map.Entry entry " + entry.getKey() + " - " + entry.getValue());
            linkListTmp = (LinkedList) entry.getValue();

            for (int j = 0; j < linkListTmp.size(); j++) {
                //linkListTmp.s
                tr = (Transaction) linkListTmp.get(j);
                System.out.println("   Map.Entry Book Name: " + entry.getKey() + ", Order id: " + tr.getOrderID() +
                        ", Volume: " + tr.getVolume() + ", Price: " + tr.getPrice() + ", Operation Type: " +
                        tr.operationType);
            }
        }
    }
    @Override
    public void startElement(String s, String s1, String elementName, Attributes attributes)
            throws SAXException {
        //if current element is transaction, create new transaction
        //clear tmpValue on start of element

        if (elementName.equalsIgnoreCase("AddOrder")) {
            transactionTmp = new Transaction(attributes.getValue("operation"));
            transactionTmp.setPrice(Double.parseDouble(attributes.getValue("price")));
            transactionTmp.setVolume(Integer.parseInt(attributes.getValue("volume")));
            transactionTmp.setOrderID(Integer.parseInt(attributes.getValue("orderId")));
            if (listMap.get(attributes.getValue("book")) == null) {
                //bookNameTmp = attributes.getValue("book");
                transactL = new LinkedList<>();
            }
            bookNameTmp = attributes.getValue("book");
        }
        if (elementName.equalsIgnoreCase("DeleteOrder")){
            bookNameTmp = attributes.getValue("book");
            orderIdTmp = Integer.parseInt(attributes.getValue("orderId"));
        }
    }
    @Override
    public void endElement(String s, String s1, String element) throws SAXException {
        if (element.equals("AddOrder")){
            if (listMap.get(bookNameTmp) != null) {
                transactL = listMap.get(bookNameTmp);
            }
            ///////////////////////////////////////////////////////////////////////////////////////////
            Integer iVolume = findAndReleaseTransaction(listMap, bookNameTmp, transactionTmp.operationType,
                    transactionTmp.getVolume(), transactionTmp.getPrice());
            if (iVolume != null) {
                transactionTmp.setVolume(iVolume);
            }
            // If volume > 0 add new transaction to the list of orders
            if (((iVolume != null) && (iVolume > 0)) || (iVolume == null)) {
                transactL.add(transactionTmp);
            }
            //listMap.get(bookName);
            //printListMap(listMap);



            // Check populated list length
            ///log("List length after population: " + transactionList.size());

            // Add new list to the map structure with key
            listMap.put(bookNameTmp, transactL);

            // Check empty map length
            ///log("Map length after population: " + listMap.size());

            // Check that map returns list by its key
            ///List returnList = (List) listMap.get(bookName);

/*
                            for (int j = 0; j < returnList.size(); j++) {
                                Transaction tr2 = (Transaction) returnList.get(0);
                                */
    ///////////////////////////////////////////////////////////////////////////////////////////

        } else if (element.equals("DeleteOrder")){
            // Get transactionList with current book
            if (listMap.get(bookNameTmp) != null) {
                transactL = listMap.get(bookNameTmp);
            }

            if (orderIdTmp != null){
                findAndDeleteTransaction(listMap, bookNameTmp, orderIdTmp);
            }

            //printListMap(listMap);
/*
                            // Check populated list length
                            log("List length after population: " + transactionList.size());*/

            // Add new list to the map structure with key
            listMap.put(bookNameTmp, transactL);
        }

    }

    @Override
    public void characters(char[] ac, int i, int j) throws SAXException {
        tmpValue = new String(ac, i, j);
    }


    public static void main(String[] args) {
        try {
            // Be nice and say hello
            log("Hello!");

            new OrderBookSAXv2(xmlFileName);

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }

    }

    // Function that find operations for realise. Negative operation Type
    private static Integer findAndReleaseTransaction(Map listMap, String bookName, String operationType,
                                                     Integer volume, Double price)
    {
        Integer result = null;
        if (bookName != null) {
            List returnList = (List) listMap.get(bookName);
            if (returnList != null) {
                for (int i = 0; i < returnList.size(); i++) {
                    Transaction tr = (Transaction) returnList.get(i);
                    //if new operation buy
                    if (tr.operationType.equals("BUY") && operationType.equals("SELL") &&
                            (tr.price >= price)) {
                        // check if volume in new transaction better than found transaction
                        if (volume >= tr.getVolume()) {
                            // remove found transaction
                            returnList.remove(i);
                            // return result as volume in new transaction minus volume in found transaction
                            result = (volume - tr.getVolume());
                        }
                        // check if volume in new transaction less than found transaction
                        else if (volume < tr.getVolume()) {
                            // set volume in found transaction
                            tr.setVolume(tr.getVolume() - volume);
                            // return 0. that means new transaction not added
                            result = 0;
                        }
                    }
                    //if new operation buy
                    if (tr.operationType.equals("SELL") && operationType.equals("BUY") &&
                            (tr.price <= price)) {
                        // check if volume in new transaction better than found transaction
                        if (volume >= tr.getVolume()) {
                            // remove found transaction
                            returnList.remove(i);
                            // return result as volume in new transaction minus volume in found transaction
                            result = (volume - tr.getVolume());
                        }
                        // check if volume in new transaction less than found transaction
                        else if (volume < tr.getVolume()) {
                            // set volume in found transaction
                            tr.setVolume(tr.getVolume() - volume);
                            // return 0. that means new transaction not added
                            result = 0;
                        }
                    }
                }
            }
        }
        return result;
    }


    // Function that find operations and delete it
    private static void findAndDeleteTransaction(Map listMap, String bookName, Integer orderId) {
        if (bookName != null) {
            List returnList = (List) listMap.get(bookName);
            if (returnList != null) {
                for (int i = 0; i < returnList.size(); i++) {
                    Transaction tr = (Transaction) returnList.get(i);
                    //if new operation buy
                    if (tr.getOrderID() == orderId) {
                        returnList.remove(i);
                    }
                }
            }
        }
    }

    // Function that logs string to the console
    private static void log(String string) {
        System.out.println(string);
    }

/*    private static void printListMap(Map<String, List> listMap) {
        for (Map.Entry entry : listMap.entrySet()) {
            System.out.println("             Map.Entry entry " + entry.getKey() + " - " + entry.getValue());
            LinkedList localLinkList = (LinkedList) entry.getValue();
            for (int j = 0; j < localLinkList.size(); j++) {
                Transaction tr = (Transaction) localLinkList.get(j);
                System.out.println("             Order id: " + tr.getOrderID() + ", Volume: " + tr.getVolume() + ", Price: " + tr.getPrice() + ", Operation Type: " + tr.operationType);
            }
        }
    }*/

    static class Transaction {
        // Store orderID
        private Integer orderID;
        // Store amount of books in that order
        private Integer volume;
        // Store book price
        private Double price;
        // Store operation type
        public String operationType;

        // Class constructior
        public Transaction (String operationType) {
            // Assign received operationType to the order
            this.operationType = operationType;
        }

        // Create property setters
        public void setVolume(Integer volume) { this.volume = volume; }

        public void setPrice(Double price) { this.price = price; }

        public void setOrderID(Integer orderID) { this.orderID = orderID; }

        // Create property getters
        public Integer getVolume() { return this.volume; }

        public Double getPrice() { return this.price; }

        public Integer getOrderID() { return this.orderID; }
    }
}
