package pkg;

/**
 * Created by Konstantin Dvoyashov on 23.06.2015.
 */

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import java.io.IOException;
import java.util.*;


public class OrderBook extends DefaultHandler {
    // store xml file path or name
    static String xmlFileName = "C:\\Users\\Admin\\Documents\\orders.xml";
    // store books and their transaction
    Map<String, List> listMap;
    // store transactions in class Transaction
    List<Transaction> transactL;
    String transactionXMLFileName;
    String valueTmp;
    Transaction transactionTmp;
    String bookNameTmp;
    Integer orderIdTmp;

    // class constructor
    public OrderBook(String xmlFileName) {
        this.transactionXMLFileName = xmlFileName;
        listMap = new HashMap();
        bookNameTmp = "";
        parseDocument();
        printData();
    }

    private void parseDocument() {
        //create instance of SAXParserFactory
        SAXParserFactory factory = SAXParserFactory.newInstance();
        try {
            SAXParser parser = factory.newSAXParser();
            parser.parse(transactionXMLFileName, this);
        } catch (ParserConfigurationException e) {
            System.out.println("ParcerConfig error");
        } catch (SAXException e) {
            System.out.println("SAXException : xml not well formed");
        } catch (IOException e) {
            System.out.println("IO error");
        }
    }

    private void printData() {
        LinkedList linkListTmp;
        Transaction tr;
        HashMap<Double, ArrayList<Integer>> mapBuy = new HashMap();
        ArrayList<Integer> arrListBuy;
        HashMap<Double, ArrayList<Integer>> mapSell = new HashMap();
        ArrayList<Integer> arrListSell;

        for (Map.Entry entry : listMap.entrySet()) {
            linkListTmp = (LinkedList) entry.getValue();
            for (int j = 0; j < linkListTmp.size(); j++) {
                tr = (Transaction) linkListTmp.get(j);
                if (tr.operationType.equals("SELL")) {
                    if (mapSell.get(tr.getPrice()) != null) {
                        arrListSell = mapSell.get(tr.getPrice());
                    } else {
                        arrListSell = new ArrayList<Integer>();
                    }
                    arrListSell.add(tr.getVolume());
                    mapSell.put(tr.getPrice(), arrListSell);
                }
                if (tr.operationType.equals("BUY")) {
                    if (mapBuy.get(tr.getPrice()) != null) {
                        arrListBuy = mapBuy.get(tr.getPrice());
                    } else {
                        arrListBuy = new ArrayList<Integer>();
                    }
                    arrListBuy.add(tr.getVolume());
                    mapBuy.put(tr.getPrice(), arrListBuy);
                }
            }
            Integer sumValue;
            // create new ArrayList instance as result for store result before it show
            List<String[]> result = new ArrayList<String[]>();
            //HashMap iteration  for transfer datas from mapBuy to result (ArrayList)

            // Sorting mapBuy
            List<Double> sortedKeys = new ArrayList<Double>(mapBuy.keySet());
            Object[] sortedBuy = sortedKeys.toArray();
            Arrays.sort(sortedBuy);

            // Sorting mapSell
            sortedKeys = new ArrayList<Double>(mapSell.keySet());
            Object[] sortedSell = sortedKeys.toArray();
            sortedSell = sortedKeys.toArray();
            Arrays.sort(sortedSell);

            for (int i = sortedBuy.length-1; i >= 0; i--) {
                Double key = (Double)sortedBuy[i];
                arrListBuy = mapBuy.get(key);
                sumValue = 0;
                for (int j = 0; j < arrListBuy.size(); j++) {
                    sumValue += arrListBuy.get(j);
                }
                result.add(new String[]{sumValue + "@" + key, "   -------"});
            }
            int counter = 0;
            for (int i = 0; i < sortedSell.length; i++) {
                Double key = (Double)sortedSell[i];
                arrListBuy = mapSell.get(key);
                sumValue = 0;
                for (int j = 0; j < arrListBuy.size(); j++) {
                    sumValue += arrListBuy.get(j);
                }
                // check there is first element in current value of result
                if(counter < result.size()){
                    // if there is then add second part
                    String[] v = result.get(counter);
                    v[1] = sumValue + "@" + key;
                } else {
                    result.add(new String[]{"------   ", sumValue + "@" + key});
                }
                counter++;
            }
            // add headlines for books results
            result.add(0, new String[]{"Qty@Price", "Qty@Price"});
            result.add(0, new String[]{"BID", "ASK"});
            result.add(0, new String[]{"Order book:", " ${" + entry.getKey()+"}"});

            for (String[] item : result) {
                // check if this condition, then remove "-" in output
                if (item[0] == "BID") {
                    log(item[0] + "         " + item[1]);
                } else if (item[0] == "Order book:") {
                    log(item[0] + item[1]);
                } else {
                    log(item[0] + " - " + item[1]);
                }
            }
            log("");
        }
    }

    @Override
    // override standard method for SAX.
    public void startElement(String s, String s1, String elementName, Attributes attributes)
            throws SAXException {
        // if current element is transaction, create new transaction

        // if in teg <AddOrder> read datas from .xml fail to temp instance of Transaction class
        if (elementName.equalsIgnoreCase("AddOrder")) {
            transactionTmp = new Transaction(attributes.getValue("operation"));
            transactionTmp.setPrice(Double.parseDouble(attributes.getValue("price")));
            transactionTmp.setVolume(Integer.parseInt(attributes.getValue("volume")));
            transactionTmp.setOrderID(Integer.parseInt(attributes.getValue("orderId")));
            // if not listMap with current book name, then create new instance of List
            if (listMap.get(attributes.getValue("book")) == null) {
                transactL = new LinkedList<>();
            }
            bookNameTmp = attributes.getValue("book");
        }
        // if in teg <DeleteOrder> read datas from .xml file to temp variables
        if (elementName.equalsIgnoreCase("DeleteOrder")){
            bookNameTmp = attributes.getValue("book");
            orderIdTmp = Integer.parseInt(attributes.getValue("orderId"));
        }
    }
    @Override
    // override standard method for SAX. Save datas to HashMap
    public void endElement(String s, String s1, String element) throws SAXException {
        if (element.equals("AddOrder")){
            if (listMap.get(bookNameTmp) != null) {
                transactL = listMap.get(bookNameTmp);
            }
            Integer iVolume = findAndReleaseTransaction(listMap, bookNameTmp, transactionTmp.operationType,
                    transactionTmp.getVolume(), transactionTmp.getPrice());
            if (iVolume != null) {
                transactionTmp.setVolume(iVolume);
            }
            // if volume > 0 add new transaction to the list of orders
            if (((iVolume != null) && (iVolume > 0)) || (iVolume == null)) {
                transactL.add(transactionTmp);
            }
            // add new list to the map structure with key
            listMap.put(bookNameTmp, transactL);

        } else if (element.equals("DeleteOrder")){
            // get transactionList with current book
            if (listMap.get(bookNameTmp) != null) {
                transactL = listMap.get(bookNameTmp);
            }
            if (orderIdTmp != null){
                findAndDeleteTransaction(listMap, bookNameTmp, orderIdTmp);
            }

            // Add new list to the map structure with key
            listMap.put(bookNameTmp, transactL);
        }
    }

    @Override
    // override standard method for SAX
    public void characters(char[] ac, int i, int j) throws SAXException {
        valueTmp = new String(ac, i, j);
    }

    // main method
    public static void main(String[] args) {
        try {
            new OrderBook (xmlFileName);

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }

    // method for finding operations for realise
    private static Integer findAndReleaseTransaction (Map listMap, String bookName, String operationType,
                                                      Integer volume, Double price)
    {
        Integer result = null;
        if (bookName != null) {
            List returnList = (List) listMap.get(bookName);
            if (returnList != null) {
                for (int i = 0; i < returnList.size(); i++) {
                    Transaction tr = (Transaction) returnList.get(i);
                    //check if finding operation is Buy and new operation is Sell
                    if (tr.operationType.equals("BUY") && operationType.equals("SELL") &&
                            (tr.price >= price)) {
                        // check if volume in new transaction better than found transaction
                        if (volume >= tr.getVolume()) {
                            // remove found transaction
                            returnList.remove(i);
                            // return result as volume in new transaction minus volume in found transaction
                            result = (volume - tr.getVolume());
                        }
                        // check if volume in new transaction less than found transaction
                        else if (volume < tr.getVolume()) {
                            // set volume in found transaction
                            tr.setVolume(tr.getVolume() - volume);
                            // return 0. This means - new transaction is not added
                            result = 0;
                        }
                    }
                    //check if finding operation is Sell and new operation is Buy
                    if (tr.operationType.equals("SELL") && operationType.equals("BUY") &&
                            (tr.price <= price)) {
                        // check if volume in new transaction better than found transaction
                        if (volume >= tr.getVolume()) {
                            // remove found transaction
                            returnList.remove(i);
                            // return result as volume in new transaction minus volume in found transaction
                            result = (volume - tr.getVolume());
                        }
                        // check if volume in new transaction less than found transaction
                        else if (volume < tr.getVolume()) {
                            // set volume in found transaction
                            tr.setVolume(tr.getVolume() - volume);
                            // return 0. that means new transaction not added
                            result = 0;
                        }
                    }
                }
            }
        }
        return result;
    }

    // method that find operations and delete it
    private static void findAndDeleteTransaction(Map listMap, String bookName, Integer orderId) {
        //check is bookName not null
        if (bookName != null) {
            //get List from map for needed book
            List returnList = (List) listMap.get(bookName);
            //check if List not null
            if (returnList != null) {
                for (int i = 0; i < returnList.size(); i++) {
                    Transaction tr = (Transaction) returnList.get(i);
                    //if transaction for removing found
                    if (tr.getOrderID() == orderId) {
                        //remove transaction
                        returnList.remove(i);
                    }
                }
            }
        }
    }

    // method that logs string to the console
    private static void log(String string) {
        System.out.println(string);
    }

    // class transaction for store transaction's data
    static class Transaction {
        // store orderID
        private Integer orderID;
        // store amount of books in that order
        private Integer volume;
        // store book price
        private Double price;
        // store operation type
        public String operationType;

        // class constructor
        public Transaction (String operationType) {
            // assign received operationType to the order
            this.operationType = operationType;
        }

        // create property setters
        public void setVolume(Integer volume) { this.volume = volume; }

        public void setPrice(Double price) { this.price = price; }

        public void setOrderID(Integer orderID) { this.orderID = orderID; }

        // create property getters
        public Integer getVolume() { return this.volume; }

        public Double getPrice() { return this.price; }

        public Integer getOrderID() { return this.orderID; }
    }
}
